from typing import Dict, Optional

from fastapi import HTTPException
from pydantic import BaseModel, Field


# Inspired by: https://cloud.google.com/apis/design/errors
class UnifiedError(BaseModel):
    code: Optional[int] = Field(
        None,
        ge=100,
        lt=600,
        example=503,
        description="The HTTP status code generated by the origin server for this occurrence of the problem.",
    )
    message: Optional[str] = Field(
        None,
        example="Service Unavailable",
        description="A developer-facing human-readable error message in English.",
    )
    details: Optional[Dict] = Field(
        None,
        description="A map of additional problem details.",
    )


# Based on RFC 7807 Standard: https://tools.ietf.org/html/rfc7807
# https://opensource.zalando.com/restful-api-guidelines/problem-1.0.1.yaml
class ProblemDetails(BaseModel):
    type: str = Field(
        "about:blank",
        example="problem/connection-error",
        description="A relative URI reference that uniquely identifies the problem type only in the context of the provided API. In combination with the API endpoint, this might point to further documentation.",
    )
    title: Optional[str] = Field(
        None,
        example="Service Unavailable",
        description="A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.",
    )
    status: Optional[int] = Field(
        None,
        ge=100,
        lt=600,
        example=503,
        description="The HTTP status code generated by the origin server for this occurrence of the problem.",
    )
    detail: Optional[str] = Field(
        None,
        example="Connection to database timed out",
        description=" A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.",
    )
    instance: Optional[str] = Field(
        None,
        description="A relative URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.",
    )
    details: Optional[Dict] = Field(
        None,
        description="A map of additional problem details",
    )


# Two base permission types:
# Client Error -> always shown to the user
# Server Error -> just shown as internal server error


class PermissionDeniedException(HTTPException):
    def __init__(self, message: Optional[str] = None) -> None:
        super(HTTPException, self).__init__(
            status_code=403,
            detail="The authorized user does not have sufficient permission. This can happen because the token does not have the right scopes or the user doesn't have the required permission.",
        )

        # Overwrite default details with the provided message
        if message:
            self.detail = message


class ResourceNotFoundException(HTTPException):
    def __init__(self, message: Optional[str] = None) -> None:
        super(HTTPException, self).__init__(
            status_code=404,
            detail="A specified resource is not found.",
        )

        # Overwrite default details with the provided message
        if message:
            self.detail = message
