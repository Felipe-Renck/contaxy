from typing import Dict, Optional

from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel, Field
from starlette.responses import JSONResponse

from contaxy.schema.exceptions import ClientBaseError


# Inspired by: https://cloud.google.com/apis/design/errors
class UnifiedErrorFormat(BaseModel):
    code: Optional[int] = Field(
        None,
        ge=100,
        lt=600,
        example=503,
        description="The HTTP status code generated by the origin server for this occurrence of the problem.",
    )
    message: Optional[str] = Field(
        None,
        example="Service Unavailable",
        description="A developer-facing human-readable error message in English.",
    )
    details: Optional[Dict] = Field(
        None,
        description="A map of additional problem details.",
    )


# Based on RFC 7807 Standard: https://tools.ietf.org/html/rfc7807
# https://opensource.zalando.com/restful-api-guidelines/problem-1.0.1.yaml
class ProblemDetailsFormat(BaseModel):
    type: str = Field(
        "about:blank",
        example="problem/connection-error",
        description="A relative URI reference that uniquely identifies the problem type only in the context of the provided API. In combination with the API endpoint, this might point to further documentation.",
    )
    title: Optional[str] = Field(
        None,
        example="Service Unavailable",
        description="A short summary of the problem type. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.",
    )
    status: Optional[int] = Field(
        None,
        ge=100,
        lt=600,
        example=503,
        description="The HTTP status code generated by the origin server for this occurrence of the problem.",
    )
    detail: Optional[str] = Field(
        None,
        example="Connection to database timed out",
        description="A human readable explanation specific to this occurrence of the problem that is helpful to locate the problem and give advice on how to proceed. Written in English and readable for engineers, usually not suited for non technical stakeholders and not localized.",
    )
    instance: Optional[str] = Field(
        None,
        description="A relative URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.",
    )
    metadata: Optional[Dict] = Field(
        None,
        description="A map of additional problem details/metadata.",
    )


async def handel_http_exeptions(request, exc):  # type: ignore
    details = None
    if isinstance(exec, ClientBaseError):
        details = exec.metadata
    return JSONResponse(
        status_code=exc.status_code,
        content=jsonable_encoder(
            UnifiedErrorFormat(
                code=exc.status_code, message=exc.detail, details=details
            ).dict(exclude_unset=True, exclude_defaults=True)
        ),
    )
