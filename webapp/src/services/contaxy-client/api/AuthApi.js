/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HTTPValidationError from '../model/HTTPValidationError';

/**
 * Auth service.
 * @module api/AuthApi
 * @version 0.1.0
 */
export default class AuthApi {
  /**
   * Constructs a new AuthApi.
   * @alias module:api/AuthApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Login Oauth
   * @param {String} username
   * @param {String} password
   * @param {Object} opts Optional parameters
   * @param {String} opts.grantType
   * @param {String} opts.scope  (default to '')
   * @param {String} opts.clientId
   * @param {String} opts.clientSecret
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
   */
  loginOauthAuthLoginPostWithHttpInfo(username, password, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'username' is set
    if (username === undefined || username === null) {
      throw new Error(
        "Missing the required parameter 'username' when calling loginOauthAuthLoginPost"
      );
    }
    // verify the required parameter 'password' is set
    if (password === undefined || password === null) {
      throw new Error(
        "Missing the required parameter 'password' when calling loginOauthAuthLoginPost"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {
      grant_type: opts['grantType'],
      username: username,
      password: password,
      scope: opts['scope'],
      client_id: opts['clientId'],
      client_secret: opts['clientSecret'],
    };

    let authNames = [];
    let contentTypes = ['application/x-www-form-urlencoded'];
    let accepts = ['application/json'];
    let returnType = Object;
    return this.apiClient.callApi(
      '/auth/login',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Login Oauth
   * @param {String} username
   * @param {String} password
   * @param {Object} opts Optional parameters
   * @param {String} opts.grantType
   * @param {String} opts.scope  (default to '')
   * @param {String} opts.clientId
   * @param {String} opts.clientSecret
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
   */
  loginOauthAuthLoginPost(username, password, opts) {
    return this.loginOauthAuthLoginPostWithHttpInfo(
      username,
      password,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Register
   * @param {String} username Username
   * @param {String} password Password
   * @param {Object} opts Optional parameters
   * @param {String} opts.email Email
   * @param {String} opts.displayName The display name can be chosen arbritarily. It can be changed anytime by updating the user data.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
   */
  registerAuthRegisterPostWithHttpInfo(username, password, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'username' is set
    if (username === undefined || username === null) {
      throw new Error(
        "Missing the required parameter 'username' when calling registerAuthRegisterPost"
      );
    }
    // verify the required parameter 'password' is set
    if (password === undefined || password === null) {
      throw new Error(
        "Missing the required parameter 'password' when calling registerAuthRegisterPost"
      );
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {
      username: username,
      password: password,
      email: opts['email'],
      display_name: opts['displayName'],
    };

    let authNames = [];
    let contentTypes = ['application/x-www-form-urlencoded'];
    let accepts = ['application/json'];
    let returnType = Object;
    return this.apiClient.callApi(
      '/auth/register',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Register
   * @param {String} username Username
   * @param {String} password Password
   * @param {Object} opts Optional parameters
   * @param {String} opts.email Email
   * @param {String} opts.displayName The display name can be chosen arbritarily. It can be changed anytime by updating the user data.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
   */
  registerAuthRegisterPost(username, password, opts) {
    return this.registerAuthRegisterPostWithHttpInfo(
      username,
      password,
      opts
    ).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}
